---
import { Code } from "@astrojs/starlight/components";
import LandingPage from "@/components/layouts/LandingPage.astro";
import VideoBlock from "@/components/VideoBlock.astro";
import CTABlock from "@/components/CTABlock.astro";
import Hero from "@/components/Hero.astro";
import LandingPageSection from "@/components/LandingPageSection.astro";
import IconGraph from "@/components/IconGraph/IconGraph.vue";

import importedCode from "/.dmno/config.mts?raw";
import intellisenseImg from "@/assets/docs-images/platform-intellisense-example.png";
import leakImg from "@/assets/docs-images/security-demo.png";
import screenshotImg from "@/assets/blog/screenshot-with-comments.png";
import iconGraphPlaceholder from "@/assets/blog/screenshot-with-comments.png";

const muxId = "FmBLL2H1yt6cEfqz01QVje7LSlI8DtF9Vn18NRsv5o6E";
---

<LandingPage
  title="DMNO"
  description="DMNO makes your configuration safer and smarter. It integrates with the tools you already use and it's powered by TypeScript and Vite."
  showToC={false}
  showSidebar={false}
  showIntegrations={true}
>
  <Hero>
    <Fragment slot="heading"> Connective Configuration </Fragment>
    <Fragment slot="subheading">
      <em>
        DMNO is the missing middleware for your configuration and secrets.
      </em>
    </Fragment>
  </Hero>

  <div class="icon-graph-container">
    <div>
      <IconGraph client:only="vue" />
    </div>
  </div>

  <CTABlock
    text="Get started ->"
    href="/docs/get-started/quickstart/"
    command="npx dmno init"
  />

  <LandingPageSection
    title="Schema-defined configuration"
    subheader="Make your config a living part of your codebase and stop relying on .env files."
    ctaLink="/docs/guides/schema/"
  >
    <Code
      code={`
import { DmnoBaseTypes, defineDmnoService, switchBy } from 'dmno';
import { EncryptedVaultDmnoPlugin, EncryptedVaultTypes } from '@dmno/encrypted-vault-plugin';
import { OnePasswordDmnoPlugin, OnePasswordTypes } from '@dmno/1password-plugin';

// use a plugin to fetch secrets from a secure backend like 1Password
const OnePass = new OnePasswordDmnoPlugin('1pass', {
  token: configPath('OP_TOKEN'),
});
// or store them encrypted within your repo
const MyProdVault = new EncryptedVaultDmnoPlugin('vault', {
  key: configPath('DMNO_VAULT_KEY'),
});

export default defineDmnoService({
  settings: {
    // automatically detect and prevent leaks
    interceptSensitiveLeakRequests: true,
    redactSensitiveLogs: true,
    preventClientLeaks: true,
  }, 
  // re-use items defined in other services
  pick: ['API_KEY', 'DB_URL', 'DMNO_ENV'], 
  // more config specific to this service
  schema: {
    DMNO_VAULT_KEY: {
      // re-use existing types with validation and docs info built-in
      extends: EncryptedVaultTypes.encryptionKey,
    },
    OP_TOKEN: {
      extends: OnePasswordTypes.serviceAccountToken,
    },
    SAAS_API_KEY: {
      // load different values based on any other value
      value: switchBy('DMNO_ENV', {
        _default: 'my-dev-key',
        production: MyProdVault.item(),
      }),
    },
    SAAS_PROJECT_TAG: {
      // use a function to set a value - reference any other config
      value: (ctx) => \`myapp_\${DMNO_CONFIG.DMNO_ENV}\`,
    },
  }
});
        `}
      lang="ts"
      title=".dmno/config.mts - sample config file"
    />
  </LandingPageSection>
  <LandingPageSection
    title="Leak prevention and detection"
    subheader="Detect and prevent leaks before they happen, and automatically redact sensitive items in your logs."
    imgPath={leakImg.src}
    imgAlt="DMNO Warning of a potential leak"
    ctaLink="/docs/get-started/security/#leak-detection"
  />
  <LandingPageSection
    title="Feature-rich IntelliSense"
    subheader="Get full-featured IntelliSense for your config in VS Code, without any additional setup."
    imgPath={intellisenseImg.src}
    imgAlt="VS Code screenshot showing DMNO's IntelliSense"
    ctaLink="https://dmno.dev/docs/guides/schema/#docs--intellisense"
  />
</LandingPage>

<style>
  .desktop-only {
    display: none;
  }

  .mobile-only {
    display: block;
  }

  .responsive-image {
    width: 100%;
    height: auto;
  }

  @media (min-width: 768px) {
    .desktop-only {
      display: block;
    }

    .mobile-only {
      display: none;
    }
  }
</style>
