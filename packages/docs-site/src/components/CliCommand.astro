---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import { Aside, Code } from "@astrojs/starlight/components";
import allCommandsSpec from "@/utils/cli.json";
import EncryptedVaultSpec from "@/utils/cli-plugin-vault.json";
import DmnoExecPathAside from './DmnoExecPathAside.md';

export const images = import.meta.glob<{ default: ImageMetadata }>(
  "../assets/tapes/*.gif",
);

export const formatExamples = (examples: typeof commandSpec['examples']) => {
  let str = "";
  examples?.map((example) => {
    str += `# ${example.description}
${example.command} \n\n`;
  });
  return str;
};

export const formatPath = (command: string) => {
  return `../assets/tapes/${command}.gif`;
};

export const getCommand = (name: string, plugin: string = "") => {
  let singleSpec =  allCommandsSpec?.find((c) => c.command === name);
  console.log ("plugin", plugin);
  if (plugin == "encrypted-vault" && singleSpec) singleSpec.examples = [...EncryptedVaultSpec.examples];
  // console.log(singleSpec);
  return singleSpec;
};

const { name, plugin } = Astro.props;

const commandSpec = getCommand(name, plugin)!;

---

<div class="dmno-cli-command">
  <h2>Reference</h2>
  <p>
    <em>Description:</em>
    <i>{commandSpec.description}</i>
  </p>
  {commandSpec.more?.options.length ? <h4>Options</h4> : null}
  {commandSpec.more?.options?.map((option) => {
    return (
      <div>
        <Code code={option.flags} />
        <p>
          <em>{option.description}</em>
        </p>
      </div>
      <hr />
    );
  })}
  {commandSpec.examples.length ? (
    <div>
      <DmnoExecPathAside />
      <h4>Example(s)</h4>
      <Code code={formatExamples(commandSpec.examples)} lang="bash" />
    </div>
  ) : null}
  { images[formatPath(commandSpec.command)] ? (
  <Image
    src={images[formatPath(commandSpec.command)]()}
    alt=`a CLI showing the dmno ${commandSpec.command} command`
  />) : null }
</div>
