---

// let integrations = ['test1', 'test2', 'test3'];
// let plugins = ['test1', 'test2', 'test3'];

const { integrations = ['test1', 'test2', 'test3'], plugins = ['test1', 'test2', 'test3'] } = Astro.props;
---
<rolling-text data-integrations={integrations} data-plugins={plugins}>
  <h1>Secure your config in <span id="integrations" class="rolling-text">{integrations[0]}</span> with <span id="plugins" class="rolling-text">{plugins[0]}</span>.</h1>
  <h2>Powered by DMNO Config.</h2>
</rolling-text>


<script>
  class RollingText extends HTMLElement {
    constructor() {
      super();
      this.integrations = this.getAttribute('data-integrations').split(',');
      this.plugins = this.getAttribute('data-plugins').split(',');
      this.currentIntegration = 0;
      this.currentPlugin = 0;
    }

    connectedCallback() {
      this.innerHTML = this.innerHTML.replace('{integrations[0]}', this.integrations[0]);
      this.innerHTML = this.innerHTML.replace('{plugins[0]}', this.plugins[0]);
      this.startRollingInt();
      this.startRollingPlug();
    }

    startRollingInt() {
      this.intervalInt = setInterval(() => {
        this.currentIntegration = (this.currentIntegration + 1) % this.integrations.length;
        this.querySelector('#integrations').innerText = this.integrations[this.currentIntegration];
        this.querySelector('#integrations').animate([
          { opacity: 0 },
          { opacity: 1 }
        ], {
          duration: 1000,
          fill: 'forwards'
        });
      }, 1500);
    }

    startRollingPlug() {
      this.intervalPlug = setInterval(() => {
        this.currentPlugin = (this.currentPlugin + 1) % this.plugins.length;
        this.querySelector('#plugins').innerText = this.plugins[this.currentPlugin];
        this.querySelector('#plugins').animate([
          { opacity: 0 },
          { opacity: 1 }
        ], {
          duration: 1000,
          fill: 'forwards'
        });
        
      }, 6000);
    }

    disconnectedCallback() {
      clearInterval(this.intervalInt);
      clearInterval(this.intervalPlug);
    }
  }

  customElements.define('rolling-text', RollingText);
  
</script>
