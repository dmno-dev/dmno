// /Users/theo/dmno/dmno-reactivity/node_modules/.pnpm/jsonc-parser@3.2.1/node_modules/jsonc-parser/lib/esm/impl/string-intern.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("/node_modules/dmno/dist/index.js", {"importedNames":["getResolverCtx"]});

const cachedSpaces = new Array(20).fill(0).map((_, index) => {
    return ' '.repeat(index);
});
Object.defineProperty(__vite_ssr_exports__, "cachedSpaces", { enumerable: true, configurable: true, get(){ return cachedSpaces }});
const maxCachedValues = 200;
const cachedBreakLinesWithSpaces = {
    ' ': {
        '\n': new Array(maxCachedValues).fill(0).map((_, index) => {
            return '\n' + ' '.repeat(index);
        }),
        '\r': new Array(maxCachedValues).fill(0).map((_, index) => {
            return '\r' + ' '.repeat(index);
        }),
        '\r\n': new Array(maxCachedValues).fill(0).map((_, index) => {
            return '\r\n' + ' '.repeat(index);
        }),
    },
    '\t': {
        '\n': new Array(maxCachedValues).fill(0).map((_, index) => {
            return '\n' + '\t'.repeat(index);
        }),
        '\r': new Array(maxCachedValues).fill(0).map((_, index) => {
            return '\r' + '\t'.repeat(index);
        }),
        '\r\n': new Array(maxCachedValues).fill(0).map((_, index) => {
            return '\r\n' + '\t'.repeat(index);
        }),
    }
};
Object.defineProperty(__vite_ssr_exports__, "cachedBreakLinesWithSpaces", { enumerable: true, configurable: true, get(){ return cachedBreakLinesWithSpaces }});
const supportedEols = ['\n', '\r', '\r\n'];
Object.defineProperty(__vite_ssr_exports__, "supportedEols", { enumerable: true, configurable: true, get(){ return supportedEols }});
